[ { "title": "Flutter工程化能力建设", "url": "/posts/flutter-engineering-construction/", "categories": "DevOps", "tags": "flutter", "date": "2022-03-15 23:31:18 +0800", "snippet": "前言本文主要介绍 Flutter 工程化能力相关建设与实践，包括 DevOps 流程规范、构建产物优化等设计细节。DevOps流程1. 混合开发采用 Flutter 和原生混合开发模式，将 Flutter 相关依赖打包发布到私有远程库，然后以 Framework 的形式集成到原生工程，Native 开发者无需了解或配置 Flutter 环境，如图所示：原生端由于 FlutterBridge 被跨端复用，所以 podspec 中不能写死 Flutter 远程依赖。对于 Flutter SDK、FlutterBoost 等必要的二进制依赖，通过 pod_target_xcconfig 配置引..." }, { "title": "组件化插件cocoapods-monorepo", "url": "/posts/mono-repo-plugin/", "categories": "组件化", "tags": "cocoapods", "date": "2021-03-04 05:14:15 +0800", "snippet": "背景介绍monorepo 作为组件化架构中的一种源码组织方案，不仅可以提高团队协同效率，统一发布、测试工作流，同时也能保留组件间的相对隔离。由于CocoaPods 并未提供官方的 monorepo 支持，因此工程早期通过在 Podfile 中使用 :path 语法来声明组件依赖：pod &#39;ModuleA&#39;, :path =&amp;gt; &#39;../modules/ModuleA&#39;...但是这种方式不仅低效，同时也无法复用组件自身依赖关系，原因如下： podspec 不能通过 :path 选项指定本地组件，缺失解析自身依赖的能力 Podfile 需穷举所..." } ]
