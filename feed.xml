<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://menttofly.com/</id><title>menttofly</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2024-04-13T12:35:56+08:00</updated> <author> <name>menttofly</name> <uri>https://menttofly.com/</uri> </author><link rel="self" type="application/atom+xml" href="https://menttofly.com/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://menttofly.com/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2024 menttofly </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Flutter工程化能力建设</title><link href="https://menttofly.com/posts/flutter-engineering-construction/" rel="alternate" type="text/html" title="Flutter工程化能力建设" /><published>2022-03-15T23:31:18+08:00</published> <updated>2024-04-13T12:35:25+08:00</updated> <id>https://menttofly.com/posts/flutter-engineering-construction/</id> <content src="https://menttofly.com/posts/flutter-engineering-construction/" /> <author> <name>menttofly</name> </author> <category term="DevOps" /> <summary> 前言 本文主要介绍 Flutter 工程化能力相关建设与实践，包括 DevOps 流程规范、构建产物优化等设计细节。 DevOps流程 1. 混合开发 采用 Flutter 和原生混合开发模式，将 Flutter 相关依赖打包发布到私有远程库，然后以 Framework 的形式集成到原生工程，Native 开发者无需了解或配置 Flutter 环境，如图所示： 原生端由于 FlutterBridge 被跨端复用，所以 podspec 中不能写死 Flutter 远程依赖。对于 Flutter SDK、FlutterBoost 等必要的二进制依赖，通过 pod_target_xcconfig 配置引入： 实际开发过程中发现，Xcode 进行编译时偶现抛出 'flutter_boost/FBFlutterViewContainer.h' file not found 之类报错... </summary> </entry> <entry><title>组件化插件cocoapods-monorepo</title><link href="https://menttofly.com/posts/mono-repo-plugin/" rel="alternate" type="text/html" title="组件化插件cocoapods-monorepo" /><published>2021-03-04T05:14:15+08:00</published> <updated>2021-04-07T10:06:24+08:00</updated> <id>https://menttofly.com/posts/mono-repo-plugin/</id> <content src="https://menttofly.com/posts/mono-repo-plugin/" /> <author> <name>menttofly</name> </author> <category term="组件化" /> <summary> 背景介绍 monorepo 作为组件化架构中的一种源码组织方案，不仅可以提高团队协同效率，统一发布、测试工作流，同时也能保留组件间的相对隔离。由于CocoaPods 并未提供官方的 monorepo 支持，因此工程早期通过在 Podfile 中使用 :path 语法来声明组件依赖： pod 'ModuleA', :path =&amp;gt; '../modules/ModuleA' ... 但是这种方式不仅低效，同时也无法复用组件自身依赖关系，原因如下： podspec 不能通过 :path 选项指定本地组件，缺失解析自身依赖的能力 Podfile 需穷举所有依赖，依赖丢失时 pod 报错，引入无关组件则造成冗余 当组件路径发生变化时，需要调整全部声明依赖项的位置 如果可以让 podspec 支持解析本地组件，所有问题就能迎刃而解。幸运的是，CocoaPods ... </summary> </entry> </feed>
